name: TMS Test

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
  pull_request:
    paths:
      - '.github/workflows/tms-test.yml'
      - 'tms_api/**'
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref'
        required: true
        default: 'develop'

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - name: Check Go code formatting
        shell: sh
        run: |
          GO_FILES=$(find ./tms_api/ -name \*.go -not -path "./tms_api/vendor/*")
          UNFORMATTED=$(gofmt -l $GO_FILES)
          [ -z "$UNFORMATTED" ] && exit 0
          for fn in $UNFORMATTED; do
              echo "::error file=$fn,line=1::This file must be formatted with gofmt\n"
          done
          exit 1
  test:
    name: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tms_api
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Copy db-setup.sql from S3
        working-directory: ./
        run: aws s3 cp s3://sunteck-mono/sql/db-setup.sql ./build/sql/
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Setup test BTMS database
        run: docker-compose -f docker-compose.test.yml run --rm migration ./bin/wait-for-it --timeout=120 db:3306 -- ./bin/phinx migrate
      - name: Start test environment
        run: docker-compose -f docker-compose.test.yml up -d webtest
      - name: Run TMS migrations
        run: |
          docker-compose -f docker-compose.test.yml exec -T webtest go build -a -o ../bin/tms cmd/tms/*
          docker-compose -f docker-compose.test.yml exec -T webtest tms migrate up
      - name: Run tests
        run: docker-compose -f docker-compose.test.yml exec -T webtest go test ./...

  notify-team-start:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Team Notify Start
        uses: mikesprague/teams-incoming-webhook-action@v1
        with:
          github-token: ${{ github.token }}
          webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          deploy-card: true
          title: 'TMS (${{ github.ref }}) QA/Tests: Started...'
          color: 'info'

  notify-team-success:
    if: ${{ github.event_name != 'pull_request' }}
    needs: [static-analysis, test]
    runs-on: ubuntu-latest
    steps:
      - name: Team Notify of Success
        uses: mikesprague/teams-incoming-webhook-action@v1
        with:
          github-token: ${{ github.token }}
          webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          deploy-card: true
          title: 'TMS (${{ github.ref }}) QA/Tests: Success :white_check_mark:'
          color: 'success'

  notify-team-failure:
    if: ${{ failure() && github.event_name != 'pull_request' }}
    needs: [static-analysis, test]
    runs-on: ubuntu-latest
    steps:
      - name: Team Notify of Failure
        uses: mikesprague/teams-incoming-webhook-action@v1
        with:
          github-token: ${{ github.token }}
          webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          deploy-card: true
          title: 'TMS (${{ github.ref }}) QA/Tests: Failure :o:'
          color: 'failure'
